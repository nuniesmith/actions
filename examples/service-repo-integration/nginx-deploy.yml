# Example for NGINX Repository  
# File: .github/workflows/deploy.yml in your NGINX repo

name: üöÄ Deploy NGINX Reverse Proxy

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode'
        required: true
        type: choice
        options:
          - 'full-deploy'
          - 'update-only'
          - 'restart-only' 
          - 'health-check'
        default: 'update-only'
      
      create_new_server:
        description: 'Create new server'
        required: false
        type: boolean
        default: false

jobs:
  deploy-nginx:
    # üëá This calls your standardized actions repository
    uses: nuniesmith/actions/.github/workflows/deploy-service.yml@main
    with:
      service_name: nginx
      deployment_mode: ${{ github.event.inputs.deployment_mode || 'update-only' }}
      create_new_server: ${{ github.event.inputs.create_new_server || false }}
      server_type: g6-standard-1  # 2GB RAM sufficient for NGINX
      target_region: ca-central
      domain_suffix: 7gram.xyz
      enable_monitoring: true
      enable_backups: true
    secrets:
      LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      SERVICE_ROOT_PASSWORD: ${{ secrets.NGINX_ROOT_PASSWORD }}
      JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
      ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      TAILSCALE_OAUTH_CLIENT_ID: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
      TAILSCALE_OAUTH_SECRET: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      NETDATA_CLAIM_TOKEN: ${{ secrets.NETDATA_CLAIM_TOKEN }}
      NETDATA_CLAIM_ROOM: ${{ secrets.NETDATA_CLAIM_ROOM }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

  # NGINX-specific post-deployment
  nginx-post-deploy:
    name: üîß NGINX Configuration
    runs-on: ubuntu-latest
    needs: deploy-nginx
    if: success()
    
    steps:
      - name: üì• Checkout NGINX Repository
        uses: actions/checkout@v4
      
      - name: üîó Setup Tailscale for Config
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: ‚öôÔ∏è Deploy NGINX Configurations
        run: |
          echo "‚öôÔ∏è Deploying NGINX configurations..."
          
          # Copy NGINX configs to server
          scp -r config/ nginx_user@nginx.7gram.xyz:/home/nginx_user/nginx/config/
          
          # Reload NGINX
          ssh nginx_user@nginx.7gram.xyz "docker-compose exec nginx nginx -s reload"
          
      - name: üß™ Test NGINX Routes
        run: |
          echo "üß™ Testing NGINX routing..."
          
          # Test health endpoint
          curl -f https://nginx.7gram.xyz/health || echo "‚ùå NGINX health check failed"
          
          # Test SSL certificate
          echo | openssl s_client -connect nginx.7gram.xyz:443 -servername nginx.7gram.xyz
