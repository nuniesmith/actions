# Example for FKS Repository
# File: .github/workflows/deploy.yml in your FKS repo

name: üöÄ Deploy FKS Trading System

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode'
        required: true
        type: choice
        options:
          - 'full-deploy'
          - 'update-only'
          - 'restart-only'
          - 'health-check'
        default: 'update-only'
      
      create_new_server:
        description: 'Create new server'
        required: false
        type: boolean
        default: false

jobs:
  deploy-fks:
    # üëá This calls your standardized actions repository
    uses: nuniesmith/actions/.github/workflows/deploy-service.yml@main
    with:
      service_name: fks
      deployment_mode: ${{ github.event.inputs.deployment_mode || 'update-only' }}
      create_new_server: ${{ github.event.inputs.create_new_server || false }}
      server_type: g6-standard-4  # 8GB RAM for FKS
      target_region: ca-central
      domain_suffix: 7gram.xyz
      enable_monitoring: true
      enable_backups: true
    secrets:
      # All secrets are inherited from the calling repository
      LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      SERVICE_ROOT_PASSWORD: ${{ secrets.FKS_ROOT_PASSWORD }}
      JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
      ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      TAILSCALE_OAUTH_CLIENT_ID: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
      TAILSCALE_OAUTH_SECRET: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      NETDATA_CLAIM_TOKEN: ${{ secrets.NETDATA_CLAIM_TOKEN }}
      NETDATA_CLAIM_ROOM: ${{ secrets.NETDATA_CLAIM_ROOM }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

  # Optional: FKS-specific post-deployment steps
  fks-post-deploy:
    name: üîß FKS Post-Deploy Tasks
    runs-on: ubuntu-latest
    needs: deploy-fks
    if: success()
    
    steps:
      - name: üì• Checkout FKS Repository
        uses: actions/checkout@v4
      
      - name: üß™ FKS Health Checks
        run: |
          echo "üß™ Running FKS-specific health checks..."
          # Add FKS-specific validation here
          curl -f https://fks.7gram.xyz/api/health || echo "‚ùå FKS API not responding"
          
      - name: üìä Configure FKS Monitoring
        run: |
          echo "üìä Setting up FKS-specific monitoring dashboards..."
          # Add any FKS-specific monitoring setup here
