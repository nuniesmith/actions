name: üöÄ Streamlined Service Deployment

# Simplified workflow that leverages scripts for all heavy lifting
# Follows stage0 (GitHub runner) -> stage1 (Arch setup) -> stage2 (systemd ready) pattern

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Service to deploy (fks, nginx, ats, etc.)'
        required: true
        type: string
      action_type:
        description: 'Action: deploy, destroy, health-check, restart'
        required: false
        type: string
        default: 'deploy'
      server_type:
        description: 'Linode server type'
        required: false
        type: string
        default: 'g6-nanode-1'
      target_region:
        description: 'Linode region'
        required: false
        type: string
        default: 'us-central'
      domain_suffix:
        description: 'Domain suffix'
        required: false
        type: string
        default: '7gram.xyz'
      overwrite_server:
        description: 'Destroy and recreate server'
        required: false
        type: boolean
        default: false
    
    secrets:
      LINODE_CLI_TOKEN:
        required: true
      SERVICE_ROOT_PASSWORD:
        required: true
      TS_OAUTH_CLIENT_ID:
        required: false
      TS_OAUTH_SECRET:
        required: false
      CLOUDFLARE_API_TOKEN:
        required: true
      CLOUDFLARE_ZONE_ID:
        required: false
    
    outputs:
      server_id:
        value: ${{ jobs.infrastructure.outputs.server_id }}
      server_ip:
        value: ${{ jobs.infrastructure.outputs.server_ip }}
      tailscale_ip:
        value: ${{ jobs.infrastructure.outputs.tailscale_ip }}
      deployment_status:
        value: ${{ jobs.service-deploy.outputs.status }}

env:
  SERVICE_NAME: ${{ inputs.service_name }}
  ACTION_TYPE: ${{ inputs.action_type }}
  FULL_DOMAIN: ${{ inputs.service_name }}.${{ inputs.domain_suffix }}

jobs:
  # ============================================================================
  # STAGE 0: Preflight (GitHub Ubuntu Runner)
  # ============================================================================
  preflight:
    name: üîç Stage 0 - Preflight
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      should_destroy: ${{ steps.check.outputs.should_destroy }}
      validated: ${{ steps.check.outputs.validated }}
    
    steps:
      - name: üìÅ Checkout Actions
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          token: ${{ github.token }}
      
      - name: üîç Run Preflight Validation
        id: check
        run: |
          chmod +x ./scripts/preflight/validate-action.sh
          ./scripts/preflight/validate-action.sh \
            "${{ env.SERVICE_NAME }}" \
            "${{ env.ACTION_TYPE }}" \
            "${{ inputs.domain_suffix }}"

  # ============================================================================
  # STAGE 1: Infrastructure (Arch Linux Server Creation)
  # ============================================================================
  infrastructure:
    name: üèóÔ∏è Stage 1 - Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [preflight]
    if: needs.preflight.outputs.validated == 'true'
    
    outputs:
      server_id: ${{ steps.linode.outputs.server_id }}
      server_ip: ${{ steps.linode.outputs.server_ip }}
      tailscale_ip: ${{ steps.tailscale.outputs.tailscale_ip }}
      ssh_key: ${{ steps.linode.outputs.ssh_private_key }}
    
    steps:
      - name: üìÅ Checkout Actions
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          token: ${{ github.token }}
      
      - name: üèóÔ∏è Create/Manage Linode Server
        id: linode
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
          SERVICE_ROOT_PASSWORD: ${{ secrets.SERVICE_ROOT_PASSWORD }}
        run: |
          chmod +x ./scripts/linode/server-manager.sh
          ./scripts/linode/server-manager.sh \
            "${{ env.SERVICE_NAME }}" \
            "${{ inputs.server_type }}" \
            "${{ inputs.target_region }}" \
            "${{ inputs.overwrite_server }}" \
            "${{ env.ACTION_TYPE }}"
      
      - name: ‚è≥ Wait for SSH
        if: steps.linode.outputs.server_ip != ''
        run: |
          chmod +x ./scripts/linode/wait-for-ssh.sh
          ./scripts/linode/wait-for-ssh.sh "${{ steps.linode.outputs.server_ip }}"
      
      - name: üîß Stage 1 - Core Setup
        if: steps.linode.outputs.server_ip != '' && env.ACTION_TYPE == 'deploy'
        env:
          SERVER_IP: ${{ steps.linode.outputs.server_ip }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ steps.linode.outputs.ssh_private_key }}" | base64 -d > ~/.ssh/deployment_key
          chmod 600 ~/.ssh/deployment_key
          
          # Transfer and run stage1 setup
          scp -i ~/.ssh/deployment_key -o StrictHostKeyChecking=no \
            ./scripts/stage1-complete-setup.sh root@$SERVER_IP:/tmp/
          
          ssh -i ~/.ssh/deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP \
            "chmod +x /tmp/stage1-complete-setup.sh && /tmp/stage1-complete-setup.sh"
      
      - name: üîó Setup Tailscale
        id: tailscale
        if: steps.linode.outputs.server_ip != '' && env.ACTION_TYPE == 'deploy'
        env:
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          SERVER_IP: ${{ steps.linode.outputs.server_ip }}
        run: |
          chmod +x ./scripts/tailscale/setup-tailscale.sh
          ./scripts/tailscale/setup-tailscale.sh \
            "${{ env.SERVICE_NAME }}" \
            "${{ steps.linode.outputs.server_ip }}"

  # ============================================================================
  # STAGE 2: System Configuration (systemd ready)
  # ============================================================================
  system-setup:
    name: üîß Stage 2 - System Ready
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [preflight, infrastructure]
    if: |
      needs.infrastructure.result == 'success' &&
      needs.infrastructure.outputs.server_ip != '' &&
      inputs.action_type == 'deploy'
    
    steps:
      - name: üìÅ Checkout Actions
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          token: ${{ github.token }}
      
      - name: üîß Stage 2 - System Configuration
        env:
          SERVER_IP: ${{ needs.infrastructure.outputs.server_ip }}
          TAILSCALE_IP: ${{ needs.infrastructure.outputs.tailscale_ip }}
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ needs.infrastructure.outputs.ssh_key }}" | base64 -d > ~/.ssh/deployment_key
          chmod 600 ~/.ssh/deployment_key
          
          # Prepare stage2 script with environment variables
          cp ./scripts/stage2-post-reboot.sh /tmp/stage2-setup.sh
          
          # Replace placeholders in stage2 script
          sed -i "s/TS_OAUTH_CLIENT_ID_PLACEHOLDER/$TS_OAUTH_CLIENT_ID/g" /tmp/stage2-setup.sh
          sed -i "s/TS_OAUTH_SECRET_PLACEHOLDER/$TS_OAUTH_SECRET/g" /tmp/stage2-setup.sh
          sed -i "s/SERVICE_NAME_PLACEHOLDER/${{ env.SERVICE_NAME }}/g" /tmp/stage2-setup.sh
          sed -i "s/DOMAIN_NAME_PLACEHOLDER/${{ env.FULL_DOMAIN }}/g" /tmp/stage2-setup.sh
          sed -i "s/CLOUDFLARE_API_TOKEN_PLACEHOLDER/$CLOUDFLARE_API_TOKEN/g" /tmp/stage2-setup.sh
          sed -i "s/CLOUDFLARE_ZONE_ID_PLACEHOLDER/${CLOUDFLARE_ZONE_ID:-}/g" /tmp/stage2-setup.sh
          
          # Transfer and run stage2 setup
          scp -i ~/.ssh/deployment_key -o StrictHostKeyChecking=no \
            /tmp/stage2-setup.sh root@$SERVER_IP:/tmp/
          
          ssh -i ~/.ssh/deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP \
            "chmod +x /tmp/stage2-setup.sh && /tmp/stage2-setup.sh"

  # ============================================================================
  # DNS Updates
  # ============================================================================
  dns-update:
    name: üåê DNS Updates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [infrastructure]
    if: |
      needs.infrastructure.result == 'success' &&
      needs.infrastructure.outputs.tailscale_ip != '' &&
      inputs.action_type == 'deploy'
    
    steps:
      - name: üìÅ Checkout Actions
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          token: ${{ github.token }}
      
      - name: üåê Update DNS Records
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TAILSCALE_IP: ${{ needs.infrastructure.outputs.tailscale_ip }}
        run: |
          chmod +x ./scripts/dns/cloudflare-updater.sh
          ./scripts/dns/cloudflare-updater.sh update-service \
            --service "${{ env.SERVICE_NAME }}" \
            --ip "$TAILSCALE_IP" \
            --domain "${{ inputs.domain_suffix }}" \
            --token "$CLOUDFLARE_API_TOKEN" \
            --zone-id "$CLOUDFLARE_ZONE_ID"

  # ============================================================================
  # Service Deployment
  # ============================================================================
  service-deploy:
    name: üöÄ Service Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [infrastructure, system-setup, dns-update]
    if: |
      always() &&
      needs.infrastructure.result == 'success' &&
      needs.system-setup.result == 'success' &&
      inputs.action_type == 'deploy'
    
    outputs:
      status: ${{ steps.deploy.outputs.status }}
    
    steps:
      - name: üìÅ Checkout Actions
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          token: ${{ github.token }}
      
      - name: üöÄ Deploy Service
        id: deploy
        env:
          SERVER_IP: ${{ needs.infrastructure.outputs.server_ip }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ needs.infrastructure.outputs.ssh_key }}" | base64 -d > ~/.ssh/deployment_key
          chmod 600 ~/.ssh/deployment_key
          
          chmod +x ./scripts/deployment/deploy-service.sh
          ./scripts/deployment/deploy-service.sh \
            "${{ env.SERVICE_NAME }}" \
            "$SERVER_IP"
          
          echo "status=success" >> $GITHUB_OUTPUT

  # ============================================================================
  # Health Checks
  # ============================================================================
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [infrastructure, service-deploy]
    if: |
      always() &&
      (inputs.action_type == 'health-check' ||
       (inputs.action_type == 'deploy' && needs.service-deploy.result == 'success'))
    
    steps:
      - name: üìÅ Checkout Actions
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          token: ${{ github.token }}
      
      - name: üè• Run Health Checks
        env:
          SERVER_IP: ${{ needs.infrastructure.outputs.server_ip }}
          TAILSCALE_IP: ${{ needs.infrastructure.outputs.tailscale_ip }}
        run: |
          if [[ -n "$SERVER_IP" ]]; then
            chmod +x ./scripts/health/service-health-check.sh
            ./scripts/health/service-health-check.sh \
              "${{ env.SERVICE_NAME }}" \
              "$SERVER_IP" \
              "$TAILSCALE_IP"
          fi

  # ============================================================================
  # Summary
  # ============================================================================
  summary:
    name: üìã Summary
    runs-on: ubuntu-latest
    needs: [preflight, infrastructure, service-deploy, health-check]
    if: always()
    
    steps:
      - name: üìã Deployment Summary
        run: |
          echo "üìã Deployment Summary for ${{ env.SERVICE_NAME }}"
          echo "=================================================="
          echo "üéØ Action: ${{ env.ACTION_TYPE }}"
          echo "üñ•Ô∏è Server Type: ${{ inputs.server_type }}"
          echo "üåç Region: ${{ inputs.target_region }}"
          echo "üîó Domain: ${{ env.FULL_DOMAIN }}"
          echo ""
          echo "üìä Job Results:"
          echo "‚úÖ Preflight: ${{ needs.preflight.result }}"
          echo "üèóÔ∏è Infrastructure: ${{ needs.infrastructure.result }}"
          echo "üöÄ Service Deploy: ${{ needs.service-deploy.result }}"
          echo "üè• Health Check: ${{ needs.health-check.result }}"
          
          if [[ "${{ needs.infrastructure.outputs.server_ip }}" ]]; then
            echo ""
            echo "üñ•Ô∏è Server Details:"
            echo "   üìç Public IP: ${{ needs.infrastructure.outputs.server_ip }}"
            echo "   üîó Tailscale IP: ${{ needs.infrastructure.outputs.tailscale_ip }}"
            echo "   üÜî Server ID: ${{ needs.infrastructure.outputs.server_id }}"
          fi
          
          if [[ "${{ needs.service-deploy.result }}" == "success" ]]; then
            echo ""
            echo "üéâ Overall Status: SUCCESS"
            echo "‚úÖ ${{ env.SERVICE_NAME }} deployment completed!"
          else
            echo ""
            echo "‚ùå Overall Status: FAILED"
            echo "üí• Check job logs for details"
          fi
