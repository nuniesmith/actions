name: üöÄ Unified Service Management

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of the service to manage (e.g., fks, nginx, ats)'
        required: true
        type: string
      
      action_type:
        description: 'Action to perform'
        required: false
        type: string
        default: 'deploy'
        # Options: deploy, destroy, health-check, restart
      
      deployment_mode:
        description: 'Deployment mode'
        required: false
        type: string
        default: 'full-deploy'
        # Options: full-deploy, update-only, restart-only, code-only
      
      # Feature Toggles
      skip_tests:
        description: 'Skip running code tests'
        required: false
        type: boolean
        default: false
      
      skip_docker_build:
        description: 'Skip building Docker images'
        required: false
        type: boolean
        default: false
      
      build_docker_on_changes:
        description: 'Only build Docker if code/Dockerfile changed'
        required: false
        type: boolean
        default: true
      
      overwrite_server:
        description: 'Destroy and recreate Linode server'
        required: false
        type: boolean
        default: false
      
      # Server Configuration
      server_type:
        description: 'Linode server type'
        required: false
        type: string
        default: 'g6-standard-2'
      
      target_region:
        description: 'Linode region'
        required: false
        type: string
        default: 'ca-central'
      
      domain_suffix:
        description: 'Domain suffix (e.g., 7gram.xyz)'
        required: false
        type: string
        default: '7gram.xyz'
      
      # Feature Toggles
      enable_backups:
        description: 'Enable Linode backups'
        required: false
        type: boolean
        default: false
      
      # Destroy Options (for destroy action)
      destroy_scope:
        description: 'What to destroy (for destroy action)'
        required: false
        type: string
        default: 'service-only'
      
      confirm_destruction:
        description: 'Type "DESTROY" to confirm destruction'
        required: false
        type: string

    secrets:
      # Core Infrastructure
      LINODE_CLI_TOKEN:
        required: true
      SERVICE_ROOT_PASSWORD:
        required: true
      
      # User Management
      JORDAN_PASSWORD:
        required: true
      ACTIONS_USER_PASSWORD:
        required: true
      
      # VPN & Networking
      TS_OAUTH_CLIENT_ID:
        description: 'Tailscale OAuth client ID'
        required: true
      TS_OAUTH_SECRET:
        description: 'Tailscale OAuth client secret'
        required: true
      TAILSCALE_TAILNET:
        description: 'Tailscale tailnet name (optional)'
        required: false
      
      # DNS Management (Optional)
      CLOUDFLARE_EMAIL:
        required: false
      CLOUDFLARE_API_TOKEN:
        required: false
      ADMIN_EMAIL:
        description: 'Admin email for Let''s Encrypt SSL certificates'
        required: false
      
      # Container Registry (Optional)
      DOCKER_USERNAME:
        required: false
      DOCKER_TOKEN:
        required: false

    outputs:
      # Infrastructure outputs
      server_ip:
        description: 'Public IP address of the deployed server'
        value: ${{ jobs.setup-infrastructure.outputs.server_ip }}
      server_id:
        description: 'Linode server ID'
        value: ${{ jobs.setup-infrastructure.outputs.server_id }}
      tailscale_ip:
        description: 'Tailscale IP address of the server'
        value: ${{ jobs.setup-infrastructure.outputs.tailscale_ip }}

  workflow_dispatch:
    inputs:
      service_name:
        description: 'Name of the service to manage'
        required: true
        type: choice
        options:
          - 'fks'
          - 'nginx'
          - 'ats'
          - 'custom'
      
      action_type:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'deploy'
          - 'destroy'
          - 'health-check'
          - 'restart'
        default: 'deploy'
      
      deployment_mode:
        description: 'Deployment mode (for deploy action)'
        required: false
        type: choice
        options:
          - 'full-deploy'
          - 'update-only'
          - 'restart-only'
          - 'code-only'
        default: 'full-deploy'
      
      # Feature Options
      skip_tests:
        description: 'Skip running code tests'
        required: false
        type: boolean
        default: false
      
      skip_docker_build:
        description: 'Skip building Docker images'
        required: false
        type: boolean
        default: false
      
      overwrite_server:
        description: 'Destroy and recreate Linode server'
        required: false
        type: boolean
        default: false
      
      # Server Configuration
      server_type:
        description: 'Linode server type'
        required: false
        type: choice
        options:
          - 'g6-nanode-1'          # 1GB RAM
          - 'g6-standard-1'        # 2GB RAM
          - 'g6-standard-2'        # 4GB RAM
          - 'g6-standard-4'        # 8GB RAM
          - 'g6-standard-8'        # 16GB RAM
        default: 'g6-standard-2'

env:
  SERVICE_NAME: ${{ inputs.service_name }}
  ACTION_TYPE: ${{ inputs.action_type }}
  DEPLOYMENT_MODE: ${{ inputs.deployment_mode }}
  SERVER_TYPE: ${{ inputs.server_type }}
  TARGET_REGION: ${{ inputs.target_region || 'ca-central' }}
  DOMAIN_SUFFIX: ${{ inputs.domain_suffix || '7gram.xyz' }}
  FULL_DOMAIN: ${{ inputs.service_name }}.${{ inputs.domain_suffix || '7gram.xyz' }}

jobs:
  # ============================================================================
  # Pre-flight Checks & Validation
  # ============================================================================
  preflight-checks:
    name: üõ´ Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      action_validated: ${{ steps.validate-action.outputs.validated }}
      should_destroy: ${{ steps.validate-action.outputs.should_destroy }}
      should_deploy: ${{ steps.validate-action.outputs.should_deploy }}
      should_health_check: ${{ steps.validate-action.outputs.should_health_check }}
      should_overwrite_server: ${{ steps.validate-action.outputs.should_overwrite_server }}
      destroy_confirmed: ${{ steps.validate-destroy.outputs.confirmed }}
      code_changed: ${{ steps.check-changes.outputs.code_changed }}
      docker_build_needed: ${{ steps.check-changes.outputs.docker_build_needed }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üéØ Validate Action Type
        id: validate-action
        env:
          ACTION_TYPE: ${{ env.ACTION_TYPE }}
          OVERWRITE_SERVER: ${{ inputs.overwrite_server }}
        run: |
          chmod +x actions/scripts/preflight/validate-action.sh
          actions/scripts/preflight/validate-action.sh "$ACTION_TYPE" "$OVERWRITE_SERVER"

      - name: ‚ö†Ô∏è Validate Destruction Request
        id: validate-destroy
        if: steps.validate-action.outputs.should_destroy == 'true' || steps.validate-action.outputs.should_overwrite_server == 'true'
        run: |
          # For server overwrite during deployment, skip confirmation requirement
          if [[ "${{ steps.validate-action.outputs.should_overwrite_server }}" == "true" && "${{ env.ACTION_TYPE }}" == "deploy" ]]; then
            echo "‚úÖ Server overwrite confirmed (deploy mode)"
            echo "confirmed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For explicit destroy actions, require confirmation
          if [[ "${{ inputs.confirm_destruction }}" != "DESTROY" ]]; then
            echo "‚ùå Destruction not confirmed. You must type 'DESTROY' exactly."
            echo "confirmed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Destruction confirmed for ${{ env.SERVICE_NAME }}"
          echo "confirmed=true" >> $GITHUB_OUTPUT

      - name: üîç Check for Code Changes
        id: check-changes
        if: steps.validate-action.outputs.should_deploy == 'true'
        env:
          BUILD_DOCKER_ON_CHANGES: ${{ inputs.build_docker_on_changes }}
        run: |
          chmod +x actions/scripts/preflight/detect-changes.sh
          actions/scripts/preflight/detect-changes.sh "$BUILD_DOCKER_ON_CHANGES"

      - name: üîê Validate Secrets
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
          SERVICE_ROOT_PASSWORD: ${{ secrets.SERVICE_ROOT_PASSWORD }}
          JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
          ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        run: |
          chmod +x actions/scripts/preflight/validate-secrets.sh
          actions/scripts/preflight/validate-secrets.sh "${{ env.SERVICE_NAME }}"

  # ============================================================================
  # Resource Cleanup (Optional, runs before deployment)
  # ============================================================================
  cleanup-old-resources:
    name: üßπ Cleanup Old Resources
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: preflight-checks
    if: |
      needs.preflight-checks.outputs.should_deploy == 'true' && 
      (github.event_name == 'push' || inputs.overwrite_server == true)
    
    steps:
      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üîó Set up Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: üßπ Cleanup Tailscale and Linode Resources
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          TAILSCALE_TAILNET: ${{ secrets.TAILSCALE_TAILNET }}
        run: |
          chmod +x actions/scripts/cleanup/cleanup-resources.sh
          actions/scripts/cleanup/cleanup-resources.sh "${{ env.SERVICE_NAME }}"
          
          # Also cleanup old GitHub runners and service devices from Tailscale
          echo "üßπ Cleaning up old Tailscale devices..."
          curl -s "https://api.tailscale.com/api/v2/tailnet/${TAILSCALE_TAILNET:-${{ github.repository_owner }}}/devices" \
            -H "Authorization: Bearer $TS_OAUTH_SECRET" | \
          jq -r '.devices[] | select(.hostname | test("github-|runner-|actions-|'${{ env.SERVICE_NAME }}'-old")) | .nodeId' | \
          while read -r device_id; do
            if [ -n "$device_id" ]; then
              echo "üóëÔ∏è Removing old device: $device_id"
              curl -X DELETE "https://api.tailscale.com/api/v2/device/$device_id" \
                -H "Authorization: Bearer $TS_OAUTH_SECRET" || true
            fi
          done

  # ============================================================================
  # Code Testing (Optional)
  # ============================================================================
  run-tests:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: [preflight-checks, cleanup-old-resources]
    if: |
      always() &&
      needs.preflight-checks.outputs.should_deploy == 'true' && 
      inputs.skip_tests == false &&
      (needs.cleanup-old-resources.result == 'success' || needs.cleanup-old-resources.result == 'skipped')
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üß™ Auto-detect and Run Tests
        run: |
          chmod +x actions/scripts/testing/run-tests.sh
          actions/scripts/testing/run-tests.sh

  # ============================================================================
  # Docker Build (Conditional)
  # ============================================================================
  build-docker-api:
    name: üê≥ Build API Docker Images
    runs-on: ubuntu-latest
    needs: [preflight-checks, cleanup-old-resources, run-tests]
    if: |
      always() && 
      needs.preflight-checks.outputs.should_deploy == 'true' && 
      inputs.skip_docker_build == false && 
      needs.preflight-checks.outputs.docker_build_needed == 'true' &&
      (needs.cleanup-old-resources.result == 'success' || needs.cleanup-old-resources.result == 'skipped') &&
      (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üîë Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: env.DOCKER_USERNAME != '' && env.DOCKER_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üê≥ Build and Push API Docker Images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          chmod +x actions/scripts/docker/build-api-docker.sh
          actions/scripts/docker/build-api-docker.sh "${{ env.SERVICE_NAME }}"

  build-docker-web:
    name: üåê Build Web Docker Images  
    runs-on: ubuntu-latest
    needs: [preflight-checks, cleanup-old-resources, run-tests]
    if: |
      always() && 
      needs.preflight-checks.outputs.should_deploy == 'true' && 
      inputs.skip_docker_build == false && 
      needs.preflight-checks.outputs.docker_build_needed == 'true' &&
      (needs.cleanup-old-resources.result == 'success' || needs.cleanup-old-resources.result == 'skipped') &&
      (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üîë Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: env.DOCKER_USERNAME != '' && env.DOCKER_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üåê Build and Push Web Docker Images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          chmod +x actions/scripts/docker/build-web-docker.sh
          actions/scripts/docker/build-web-docker.sh "${{ env.SERVICE_NAME }}"

  build-docker-auth:
    name: üîê Build Auth Docker Images
    runs-on: ubuntu-latest
    needs: [preflight-checks, cleanup-old-resources, run-tests]
    if: |
      always() && 
      needs.preflight-checks.outputs.should_deploy == 'true' && 
      inputs.skip_docker_build == false && 
      needs.preflight-checks.outputs.docker_build_needed == 'true' &&
      (needs.cleanup-old-resources.result == 'success' || needs.cleanup-old-resources.result == 'skipped') &&
      (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üîë Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        if: env.DOCKER_USERNAME != '' && env.DOCKER_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: üîê Build and Push Auth Docker Images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          chmod +x actions/scripts/docker/build-auth-docker.sh
          actions/scripts/docker/build-auth-docker.sh "${{ env.SERVICE_NAME }}"

  # ============================================================================
  # Server Infrastructure Setup
  # ============================================================================
  setup-infrastructure:
    name: üèóÔ∏è Setup Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [preflight-checks, cleanup-old-resources, build-docker-api, build-docker-web, build-docker-auth]
    if: |
      always() && 
      needs.preflight-checks.outputs.should_deploy == 'true' &&
      (needs.cleanup-old-resources.result == 'success' || needs.cleanup-old-resources.result == 'skipped') &&
      (needs.build-docker-api.result == 'success' || needs.build-docker-api.result == 'skipped') &&
      (needs.build-docker-web.result == 'success' || needs.build-docker-web.result == 'skipped') &&
      (needs.build-docker-auth.result == 'success' || needs.build-docker-auth.result == 'skipped')
    outputs:
      server_ip: ${{ steps.create-server.outputs.server_ip }}
      server_id: ${{ steps.create-server.outputs.server_id }}
      tailscale_ip: ${{ steps.stage2-setup.outputs.tailscale_ip }}
      ssh_private_key: ${{ steps.create-server.outputs.ssh_private_key }}
    
    steps:
      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üöÄ Create or Find Server
        id: create-server
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
          SERVICE_ROOT_PASSWORD: ${{ secrets.SERVICE_ROOT_PASSWORD }}
        run: |
          chmod +x actions/scripts/linode/create-server.sh
          actions/scripts/linode/create-server.sh "${{ env.SERVICE_NAME }}" "${{ env.SERVER_TYPE }}" "${{ env.TARGET_REGION }}" "${{ inputs.overwrite_server }}"

      - name: ‚è≥ Wait for SSH Access
        run: |
          chmod +x actions/scripts/linode/wait-for-ssh.sh
          actions/scripts/linode/wait-for-ssh.sh "${{ steps.create-server.outputs.server_ip }}"

      - name: üèóÔ∏è Stage 1 - Pre-Reboot Setup
        id: stage1-setup
        env:
          TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}
          TAILSCALE_TAILNET: ${{ secrets.TAILSCALE_TAILNET }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          SERVICE_ROOT_PASSWORD: ${{ secrets.SERVICE_ROOT_PASSWORD }}
          ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
          JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
        run: |
          echo "üèóÔ∏è Stage 1: Pre-reboot foundation setup..."
          
          # Download existing stage1 script (keep using the existing one)
          curl -o stage1-setup.sh https://raw.githubusercontent.com/nuniesmith/actions/main/scripts/stage1-complete-setup.sh
          chmod +x stage1-setup.sh
          
          # Download and configure stage2 script
          curl -o stage2-post-reboot.sh https://raw.githubusercontent.com/nuniesmith/actions/main/scripts/stage2-post-reboot.sh
          chmod +x stage2-post-reboot.sh
          
          # Replace placeholders in setup scripts
          echo "üîÑ Replacing placeholders in setup scripts..."
          sed -i "s/SERVICE_NAME_PLACEHOLDER/${{ env.SERVICE_NAME }}/g" stage1-setup.sh
          sed -i "s/ACTIONS_USER_PASSWORD_PLACEHOLDER/${ACTIONS_USER_PASSWORD}/g" stage1-setup.sh
          sed -i "s/JORDAN_PASSWORD_PLACEHOLDER/${JORDAN_PASSWORD}/g" stage1-setup.sh
          
          # Replace placeholders in stage2 script
          sed -i "s/SERVICE_NAME_PLACEHOLDER/${{ env.SERVICE_NAME }}/g" stage2-post-reboot.sh
          sed -i "s/CLOUDFLARE_EMAIL_PLACEHOLDER/${CLOUDFLARE_EMAIL}/g" stage2-post-reboot.sh
          sed -i "s/CLOUDFLARE_API_TOKEN_PLACEHOLDER/${CLOUDFLARE_API_TOKEN}/g" stage2-post-reboot.sh
          sed -i "s/ADMIN_EMAIL_PLACEHOLDER/${ADMIN_EMAIL}/g" stage2-post-reboot.sh
          sed -i "s/TS_OAUTH_CLIENT_ID_PLACEHOLDER/${TS_OAUTH_CLIENT_ID}/g" stage2-post-reboot.sh
          sed -i "s/TS_OAUTH_SECRET_PLACEHOLDER/${TS_OAUTH_SECRET}/g" stage2-post-reboot.sh
          sed -i "s/TAILSCALE_TAILNET_PLACEHOLDER/${TAILSCALE_TAILNET}/g" stage2-post-reboot.sh
          
          # Upload and execute stage 1 setup
          echo "üì§ Uploading setup scripts..."
          scp -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no stage1-setup.sh root@${{ steps.create-server.outputs.server_ip }}:/tmp/
          scp -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no stage2-post-reboot.sh root@${{ steps.create-server.outputs.server_ip }}:/usr/local/bin/
          
          ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} "
            chmod +x /tmp/stage1-setup.sh
            chmod +x /usr/local/bin/stage2-post-reboot.sh
            /tmp/stage1-setup.sh
          "

      - name: üîÑ Reboot Server
        run: |
          echo "üîÑ Rebooting server for kernel updates..."
          ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} "reboot" || true
          sleep 60  # Wait for reboot

      - name: üèóÔ∏è Stage 2 - Post-Reboot Setup
        id: stage2-setup
        run: |
          echo "üèóÔ∏è Stage 2: Post-reboot setup and verification..."
          
          # Wait for SSH to be available after reboot (simplified)
          echo "‚è≥ Waiting for server to come back online..."
          sleep 30  # Give server time to start rebooting
          
          # Simple SSH availability check with timeout
          MAX_SSH_ATTEMPTS=20
          SSH_ATTEMPT=1
          
          while [ $SSH_ATTEMPT -le $MAX_SSH_ATTEMPTS ]; do
            echo "SSH attempt $SSH_ATTEMPT/$MAX_SSH_ATTEMPTS..."
            
            if ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@${{ steps.create-server.outputs.server_ip }} "echo 'SSH ready'" >/dev/null 2>&1; then
              echo "‚úÖ SSH connection established"
              break
            fi
            
            if [ $SSH_ATTEMPT -eq $MAX_SSH_ATTEMPTS ]; then
              echo "‚ùå SSH connection failed after $MAX_SSH_ATTEMPTS attempts"
              exit 1
            fi
            
            sleep 15
            SSH_ATTEMPT=$((SSH_ATTEMPT + 1))
          done
          
          # Run stage2 script directly instead of relying on systemd service
          echo "üîß Running stage2 setup directly..."
          ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} '
            if [ -f /usr/local/bin/stage2-post-reboot.sh ]; then
              echo "üìã Running stage2 script..."
              chmod +x /usr/local/bin/stage2-post-reboot.sh
              /usr/local/bin/stage2-post-reboot.sh
              echo "‚úÖ Stage2 script completed with exit code: $?"
            else
              echo "‚ö†Ô∏è Stage2 script not found, skipping..."
            fi
          '
          
          # Wait a bit for Tailscale to initialize
          echo "‚è≥ Waiting for Tailscale to initialize..."
          sleep 30
          
          # Verify Tailscale connection with better debugging
          echo "üîç Verifying Tailscale connection..."
          
          # First check if Tailscale is running
          echo "üìã Checking Tailscale daemon status..."
          ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} \
            "systemctl status tailscaled --no-pager -l" || true
          
          TAILSCALE_ATTEMPTS=6  # Reduced attempts, but with better checks
          TAILSCALE_ATTEMPT=1
          
          while [ $TAILSCALE_ATTEMPT -le $TAILSCALE_ATTEMPTS ]; do
            echo "üîó Tailscale attempt $TAILSCALE_ATTEMPT/$TAILSCALE_ATTEMPTS: Checking connection..."
            
            # Get comprehensive Tailscale status
            TAILSCALE_STATUS=$(ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} \
              "tailscale status 2>/dev/null || echo 'ERROR: tailscale status failed'")
            
            echo "üìã Tailscale status output:"
            echo "$TAILSCALE_STATUS"
            
            # Try to get IP
            TAILSCALE_IP=$(ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} \
              "tailscale ip -4 2>/dev/null | head -1 | tr -d '\n' || echo 'no-ip'")
            
            echo "üîó Tailscale IP result: '$TAILSCALE_IP'"
            
            # Check if we got a valid IP (proper regex validation)
            if [[ "$TAILSCALE_IP" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              echo "‚úÖ Tailscale connected successfully with IP: $TAILSCALE_IP"
              echo "tailscale_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
              
              # Get hostname for verification
              TAILSCALE_HOSTNAME=$(ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} \
                "hostname 2>/dev/null || echo 'unknown'")
              echo "üè∑Ô∏è Server hostname: $TAILSCALE_HOSTNAME"
              
              exit 0
            else
              echo "‚è≥ Tailscale not ready yet (got: '$TAILSCALE_IP'), checking logs..."
              
              # Show recent Tailscale logs for debugging
              echo "üìã Recent tailscaled logs:"
              ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} \
                "journalctl -u tailscaled --no-pager -n 10 --since '5 minutes ago'" || true
              
              if [ $TAILSCALE_ATTEMPT -lt $TAILSCALE_ATTEMPTS ]; then
                echo "‚è≥ Waiting 20 seconds before next attempt..."
                sleep 20
              fi
              TAILSCALE_ATTEMPT=$((TAILSCALE_ATTEMPT + 1))
            fi
          done
          
          echo "‚ö†Ô∏è Tailscale connection not established after $TAILSCALE_ATTEMPTS attempts"
          echo "üìã Final Tailscale diagnostics:"
          ssh -i ~/.ssh/linode_deployment_key -o StrictHostKeyChecking=no root@${{ steps.create-server.outputs.server_ip }} '
            echo "=== Tailscale Status ==="
            tailscale status 2>&1 || echo "Status command failed"
            echo "=== Tailscale Version ==="
            tailscale version 2>&1 || echo "Version command failed"
            echo "=== Recent Tailscaled Logs ==="
            journalctl -u tailscaled --no-pager -n 20 --since "10 minutes ago" 2>&1 || echo "Log retrieval failed"
            echo "=== Network Interfaces ==="
            ip addr show 2>&1 || echo "Network interface check failed"
          '
          
          # Continue without Tailscale IP (don't fail the deployment)
          echo "tailscale_ip=" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Continuing deployment without Tailscale IP..."

  # ============================================================================
  # Deploy Service Application  
  # ============================================================================
  deploy-service:
    name: üöÄ Deploy Service
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [preflight-checks, setup-infrastructure]
    if: |
      always() && 
      needs.preflight-checks.outputs.should_deploy == 'true' &&
      needs.setup-infrastructure.result == 'success'
    
    steps:
      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üöÄ Deploy Service to Server
        run: |
          # Decode SSH private key for deployment
          mkdir -p ~/.ssh
          echo "${{ needs.setup-infrastructure.outputs.ssh_private_key }}" | base64 -d > ~/.ssh/deployment_key
          chmod 600 ~/.ssh/deployment_key
          
          chmod +x actions/scripts/deployment/deploy-service.sh
          actions/scripts/deployment/deploy-service.sh "${{ env.SERVICE_NAME }}" "${{ needs.setup-infrastructure.outputs.server_ip }}"

  # ============================================================================
  # Health Checks
  # ============================================================================
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    needs: [preflight-checks, setup-infrastructure, deploy-service]
    if: |
      always() && 
      (needs.preflight-checks.outputs.should_health_check == 'true' || 
       (needs.preflight-checks.outputs.should_deploy == 'true' && needs.deploy-service.result == 'success'))
    
    steps:
      - name: üì• Checkout Actions Repository
        uses: actions/checkout@v4
        with:
          repository: nuniesmith/actions
          path: actions

      - name: üè• Perform Health Checks
        run: |
          # Decode SSH private key for health checks
          mkdir -p ~/.ssh
          echo "${{ needs.setup-infrastructure.outputs.ssh_private_key }}" | base64 -d > ~/.ssh/deployment_key
          chmod 600 ~/.ssh/deployment_key
          
          chmod +x actions/scripts/health/health-check.sh
          actions/scripts/health/health-check.sh "${{ env.SERVICE_NAME }}" "${{ needs.setup-infrastructure.outputs.server_ip }}" "${{ needs.setup-infrastructure.outputs.tailscale_ip }}"

  # ============================================================================
  # Summary Report
  # ============================================================================
  deployment-summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [preflight-checks, setup-infrastructure, deploy-service, health-check]
    if: always()
    
    steps:
      - name: üìã Generate Deployment Report
        run: |
          echo "üìã Deployment Summary for ${{ env.SERVICE_NAME }}"
          echo "=================================================="
          echo "üéØ Action: ${{ env.ACTION_TYPE }}"
          echo "üñ•Ô∏è  Server Type: ${{ env.SERVER_TYPE }}"
          echo "üåç Region: ${{ env.TARGET_REGION }}"
          echo "üîó Domain: ${{ env.FULL_DOMAIN }}"
          echo ""
          
          # Job Status Summary
          echo "üìä Job Results:"
          echo "‚úÖ Preflight Checks: ${{ needs.preflight-checks.result }}"
          echo "üèóÔ∏è  Infrastructure: ${{ needs.setup-infrastructure.result }}"
          echo "üöÄ Service Deploy: ${{ needs.deploy-service.result }}"
          echo "üè• Health Check: ${{ needs.health-check.result }}"
          echo ""
          
          # Server Information
          if [[ "${{ needs.setup-infrastructure.result }}" == "success" ]]; then
            echo "üñ•Ô∏è  Server Details:"
            echo "   üìç Public IP: ${{ needs.setup-infrastructure.outputs.server_ip }}"
            echo "   üîó Tailscale IP: ${{ needs.setup-infrastructure.outputs.tailscale_ip }}"
            echo "   üÜî Server ID: ${{ needs.setup-infrastructure.outputs.server_id }}"
            echo ""
          fi
          
          # Overall Status
          if [[ "${{ needs.setup-infrastructure.result }}" == "success" && 
                ("${{ needs.deploy-service.result }}" == "success" || "${{ needs.deploy-service.result }}" == "skipped") ]]; then
            echo "üéâ Overall Status: SUCCESS"
            echo "‚úÖ ${{ env.SERVICE_NAME }} deployment completed successfully!"
          else
            echo "‚ùå Overall Status: FAILED"
            echo "üí• Deployment encountered errors - check job logs for details"
          fi
