name: 🚀 Enhanced FKS Multi-Server Deployment

on:
  workflow_call:
    inputs:
      deployment_mode:
        description: 'Deployment mode: single, multi-auth, multi-api, multi-web, multi-all'
        required: true
        type: string
        default: 'multi-all'
      
      server_type:
        description: 'Linode server type'
        required: false
        type: string
        default: 'g6-standard-2'
      
      target_region:
        description: 'Linode region'
        required: false
        type: string
        default: 'ca-central'
      
      domain_suffix:
        description: 'Domain suffix'
        required: false
        type: string
        default: '7gram.xyz'
      
      update_dns:
        description: 'Update Cloudflare DNS records'
        required: false
        type: boolean
        default: true
      
      create_new_servers:
        description: 'Create new servers if they do not exist'
        required: false
        type: boolean
        default: true

    secrets:
      # Core Infrastructure
      LINODE_CLI_TOKEN:
        required: true
      SERVICE_ROOT_PASSWORD:
        required: true
      
      # User Management
      JORDAN_PASSWORD:
        required: true
      ACTIONS_USER_PASSWORD:
        required: true
      
      # VPN & Networking
      TAILSCALE_AUTH_KEY:
        required: true
      TAILSCALE_OAUTH_CLIENT_ID:
        required: false
      TAILSCALE_OAUTH_SECRET:
        required: false
      
      # DNS Management
      CLOUDFLARE_API_TOKEN:
        required: false
      CLOUDFLARE_ZONE_ID:
        required: false
      
      # Container Registry
      DOCKER_USERNAME:
        required: false
      DOCKER_TOKEN:
        required: false
      
      # Notifications
      DISCORD_WEBHOOK:
        required: false

    outputs:
      auth_server_ip:
        description: 'Auth server Tailscale IP'
        value: ${{ jobs.deploy-auth.outputs.tailscale_ip }}
      api_server_ip:
        description: 'API server Tailscale IP'
        value: ${{ jobs.deploy-api.outputs.tailscale_ip }}
      web_server_ip:
        description: 'Web server Tailscale IP'
        value: ${{ jobs.deploy-web.outputs.tailscale_ip }}
      single_server_ip:
        description: 'Single server Tailscale IP'
        value: ${{ jobs.deploy-single.outputs.tailscale_ip }}

  workflow_dispatch:
    inputs:
      deployment_mode:
        description: 'Deployment mode'
        required: true
        type: choice
        options:
          - 'single'
          - 'multi-auth'
          - 'multi-api'
          - 'multi-web'
          - 'multi-all'
        default: 'multi-all'
      
      server_type:
        description: 'Linode server type'
        required: false
        type: choice
        options:
          - 'g6-nanode-1'          # 1GB RAM - $5/month
          - 'g6-standard-1'        # 2GB RAM - $10/month
          - 'g6-standard-2'        # 4GB RAM - $20/month
          - 'g6-standard-4'        # 8GB RAM - $40/month
        default: 'g6-standard-2'
      
      create_new_servers:
        description: 'Create new servers if they do not exist'
        required: false
        type: boolean
        default: true
      
      update_dns:
        description: 'Update Cloudflare DNS records'
        required: false
        type: boolean
        default: true

env:
  DEPLOYMENT_MODE: ${{ inputs.deployment_mode }}
  SERVER_TYPE: ${{ inputs.server_type }}
  TARGET_REGION: ${{ inputs.target_region || 'ca-central' }}
  DOMAIN_SUFFIX: ${{ inputs.domain_suffix || '7gram.xyz' }}
  UPDATE_DNS: ${{ inputs.update_dns }}
  CREATE_NEW_SERVERS: ${{ inputs.create_new_servers }}

jobs:
  # ============================================================================
  # Pre-flight Checks & Strategy
  # ============================================================================
  preflight-checks:
    name: 🛫 Pre-flight Checks & Strategy
    runs-on: ubuntu-latest
    outputs:
      should_deploy_single: ${{ steps.strategy.outputs.should_deploy_single }}
      should_deploy_auth: ${{ steps.strategy.outputs.should_deploy_auth }}
      should_deploy_api: ${{ steps.strategy.outputs.should_deploy_api }}
      should_deploy_web: ${{ steps.strategy.outputs.should_deploy_web }}
      auth_server_name: ${{ steps.strategy.outputs.auth_server_name }}
      api_server_name: ${{ steps.strategy.outputs.api_server_name }}
      web_server_name: ${{ steps.strategy.outputs.web_server_name }}
      single_server_name: ${{ steps.strategy.outputs.single_server_name }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🎯 Determine Deployment Strategy
        id: strategy
        run: |
          echo "🎯 Analyzing deployment mode: ${{ env.DEPLOYMENT_MODE }}"
          
          case "${{ env.DEPLOYMENT_MODE }}" in
            "single")
              echo "should_deploy_single=true" >> $GITHUB_OUTPUT
              echo "should_deploy_auth=false" >> $GITHUB_OUTPUT
              echo "should_deploy_api=false" >> $GITHUB_OUTPUT
              echo "should_deploy_web=false" >> $GITHUB_OUTPUT
              echo "single_server_name=fks" >> $GITHUB_OUTPUT
              ;;
            "multi-auth")
              echo "should_deploy_single=false" >> $GITHUB_OUTPUT
              echo "should_deploy_auth=true" >> $GITHUB_OUTPUT
              echo "should_deploy_api=false" >> $GITHUB_OUTPUT
              echo "should_deploy_web=false" >> $GITHUB_OUTPUT
              echo "auth_server_name=fks-auth" >> $GITHUB_OUTPUT
              ;;
            "multi-api")
              echo "should_deploy_single=false" >> $GITHUB_OUTPUT
              echo "should_deploy_auth=false" >> $GITHUB_OUTPUT
              echo "should_deploy_api=true" >> $GITHUB_OUTPUT
              echo "should_deploy_web=false" >> $GITHUB_OUTPUT
              echo "api_server_name=fks-api" >> $GITHUB_OUTPUT
              ;;
            "multi-web")
              echo "should_deploy_single=false" >> $GITHUB_OUTPUT
              echo "should_deploy_auth=false" >> $GITHUB_OUTPUT
              echo "should_deploy_api=false" >> $GITHUB_OUTPUT
              echo "should_deploy_web=true" >> $GITHUB_OUTPUT
              echo "web_server_name=fks-web" >> $GITHUB_OUTPUT
              ;;
            "multi-all")
              echo "should_deploy_single=false" >> $GITHUB_OUTPUT
              echo "should_deploy_auth=true" >> $GITHUB_OUTPUT
              echo "should_deploy_api=true" >> $GITHUB_OUTPUT
              echo "should_deploy_web=true" >> $GITHUB_OUTPUT
              echo "auth_server_name=fks-auth" >> $GITHUB_OUTPUT
              echo "api_server_name=fks-api" >> $GITHUB_OUTPUT
              echo "web_server_name=fks-web" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "❌ Invalid deployment mode: ${{ env.DEPLOYMENT_MODE }}"
              exit 1
              ;;
          esac
          
          echo "✅ Deployment strategy determined"

      - name: 🔐 Validate Secrets
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "🔐 Validating required secrets..."
          
          MISSING_SECRETS=()
          [[ -z "$LINODE_CLI_TOKEN" ]] && MISSING_SECRETS+=("LINODE_CLI_TOKEN")
          [[ -z "$TAILSCALE_AUTH_KEY" ]] && MISSING_SECRETS+=("TAILSCALE_AUTH_KEY")
          
          if [[ "${{ env.UPDATE_DNS }}" == "true" ]]; then
            [[ -z "$CLOUDFLARE_API_TOKEN" ]] && MISSING_SECRETS+=("CLOUDFLARE_API_TOKEN")
            [[ -z "$CLOUDFLARE_ZONE_ID" ]] && MISSING_SECRETS+=("CLOUDFLARE_ZONE_ID")
          fi
          
          if [[ ${#MISSING_SECRETS[@]} -gt 0 ]]; then
            echo "❌ Missing required secrets:"
            printf '  - %s\n' "${MISSING_SECRETS[@]}"
            exit 1
          fi
          
          echo "✅ All required secrets validated"

  # ============================================================================
  # Auth Server Deployment
  # ============================================================================
  deploy-auth:
    name: 🔐 Deploy Auth Server
    runs-on: ubuntu-latest
    needs: preflight-checks
    if: needs.preflight-checks.outputs.should_deploy_auth == 'true'
    timeout-minutes: 45
    outputs:
      server_ip: ${{ steps.stage0-auth.outputs.server_ip }}
      server_id: ${{ steps.stage0-auth.outputs.server_id }}
      tailscale_ip: ${{ steps.get-tailscale-ip.outputs.tailscale_ip }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Infrastructure Tools
        run: |
          # Install dependencies
          pip install linode-cli
          sudo apt-get update && sudo apt-get install -y sshpass jq
          
          # Configure Linode CLI
          mkdir -p ~/.config/linode-cli
          cat > ~/.config/linode-cli/config << EOF
          [DEFAULT]
          default-user = DEFAULT
          region = ${{ env.TARGET_REGION }}
          type = ${{ env.SERVER_TYPE }}
          image = linode/arch
          token = ${{ secrets.LINODE_CLI_TOKEN }}
          EOF
          chmod 600 ~/.config/linode-cli/config

      - name: 🚀 Stage 0 Create Auth Server
        id: stage0-auth
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
          SERVICE_ROOT_PASSWORD: ${{ secrets.SERVICE_ROOT_PASSWORD }}
        run: |
          SERVER_NAME="${{ needs.preflight-checks.outputs.auth_server_name }}"
          echo "🚀 Creating Auth Server: $SERVER_NAME"
          
          # Check if server exists
          EXISTING_SERVER=$(linode-cli linodes list --text --no-headers | grep "$SERVER_NAME" | head -1 || echo "")
          
          if [[ -n "$EXISTING_SERVER" ]] && [[ "${{ env.CREATE_NEW_SERVERS }}" != "true" ]]; then
            echo "✅ Using existing Auth server"
            SERVER_ID=$(echo "$EXISTING_SERVER" | cut -f1)
            
            # Get server IP
            SERVER_INFO=$(linode-cli linodes view "$SERVER_ID" --text --no-headers)
            for col in 4 5 6 7; do
              SERVER_IP=$(echo "$SERVER_INFO" | cut -f$col)
              if [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                break
              fi
            done
          else
            echo "🆕 Creating new Auth server"
            
            # Generate SSH key
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/auth_deployment_key -N "" -C "github-actions-auth"
            SSH_PUBLIC_KEY=$(cat ~/.ssh/auth_deployment_key.pub)
            
            # Create server
            RESULT=$(linode-cli linodes create \
              --type "${{ env.SERVER_TYPE }}" \
              --region "${{ env.TARGET_REGION }}" \
              --image "linode/arch" \
              --label "$SERVER_NAME" \
              --root_pass "${{ secrets.SERVICE_ROOT_PASSWORD }}" \
              --authorized_keys "$SSH_PUBLIC_KEY" \
              --text --no-headers)
            
            SERVER_ID=$(echo "$RESULT" | cut -f1)
            
            # Wait for server to be ready
            echo "⏳ Waiting for Auth server to be ready..."
            for i in {1..20}; do
              SERVER_INFO=$(linode-cli linodes view "$SERVER_ID" --text --no-headers)
              STATUS=$(echo "$SERVER_INFO" | cut -f6)
              
              if [[ "$STATUS" == "running" ]]; then
                echo "✅ Auth server is running"
                break
              fi
              
              echo "Attempt $i/20: Status=$STATUS"
              sleep 15
            done
            
            # Get server IP
            for col in 4 5 6 7; do
              SERVER_IP=$(echo "$SERVER_INFO" | cut -f$col)
              if [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                break
              fi
            done
          fi
          
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          echo "server_id=$SERVER_ID" >> $GITHUB_OUTPUT
          echo "✅ Auth Server ready: $SERVER_IP"

      - name: 🛠️ Configure Auth Server
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
          ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          SERVER_IP="${{ steps.stage0-auth.outputs.server_ip }}"
          echo "🛠️ Configuring Auth server at $SERVER_IP..."
          
          # Wait for SSH
          for i in {1..15}; do
            if timeout 10 ssh -i ~/.ssh/auth_deployment_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$SERVER_IP "echo 'SSH ready'" 2>/dev/null; then
              echo "✅ SSH access confirmed"
              break
            fi
            echo "Attempt $i/15: SSH not ready yet..."
            sleep 20
          done
          
          # Create configuration script
          cat > /tmp/auth-setup.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "🔄 Updating system..."
          pacman -Syu --noconfirm
          pacman -S --noconfirm curl wget git docker docker-compose tailscale sudo base-devel
          
          echo "👥 Creating service users..."
          useradd -m -s /bin/bash fks_user || true
          echo "fks_user:ACTIONS_PASSWORD_PLACEHOLDER" | chpasswd
          usermod -aG docker fks_user
          
          echo "📁 Setting up FKS directory..."
          mkdir -p /home/fks_user/fks
          cd /home/fks_user/fks
          if [[ ! -d ".git" ]]; then
            git clone https://github.com/REPO_OWNER_PLACEHOLDER/fks.git . || echo "Clone failed, continuing..."
          fi
          chown -R fks_user:fks_user /home/fks_user/fks
          
          echo "🔗 Setting up Tailscale..."
          systemctl enable tailscaled
          systemctl start tailscaled
          hostnamectl set-hostname "fks-auth"
          tailscale up --authkey="TAILSCALE_KEY_PLACEHOLDER" --hostname="fks-auth" --accept-routes --timeout=120s
          
          echo "🐳 Starting Docker..."
          systemctl enable docker
          systemctl start docker
          
          echo "✅ Auth server setup complete"
          EOF
          
          # Replace placeholders
          sed -i "s/ACTIONS_PASSWORD_PLACEHOLDER/$ACTIONS_USER_PASSWORD/g" /tmp/auth-setup.sh
          sed -i "s/TAILSCALE_KEY_PLACEHOLDER/$TAILSCALE_AUTH_KEY/g" /tmp/auth-setup.sh
          sed -i "s/REPO_OWNER_PLACEHOLDER/${{ github.repository_owner }}/g" /tmp/auth-setup.sh
          
          # Execute setup
          scp -i ~/.ssh/auth_deployment_key -o StrictHostKeyChecking=no /tmp/auth-setup.sh root@$SERVER_IP:/tmp/
          ssh -i ~/.ssh/auth_deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP "chmod +x /tmp/auth-setup.sh && /tmp/auth-setup.sh"

      - name: 🚢 Deploy Auth Services
        run: |
          SERVER_IP="${{ steps.stage0-auth.outputs.server_ip }}"
          echo "🚢 Deploying Auth services to $SERVER_IP..."
          
          # Use the FKS service manager to deploy auth-specific services
          chmod +x ./services/fks/fks-service-manager.sh
          # For auth server, we deploy all services but focus on auth components
          ./services/fks/fks-service-manager.sh deploy --mode single --server fks_user@$SERVER_IP

      - name: 🔗 Get Tailscale IP
        id: get-tailscale-ip
        run: |
          SERVER_IP="${{ steps.stage0-auth.outputs.server_ip }}"
          echo "🔗 Getting Tailscale IP for Auth server..."
          
          TAILSCALE_IP=$(ssh -i ~/.ssh/auth_deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP "tailscale ip -4 2>/dev/null" || echo "")
          
          if [[ -n "$TAILSCALE_IP" ]]; then
            echo "✅ Auth Tailscale IP: $TAILSCALE_IP"
            echo "tailscale_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not get Tailscale IP"
            echo "tailscale_ip=" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # API Server Deployment  
  # ============================================================================
  deploy-api:
    name: ⚡ Deploy API Server
    runs-on: ubuntu-latest
    needs: [preflight-checks, deploy-auth]
    if: needs.preflight-checks.outputs.should_deploy_api == 'true'
    timeout-minutes: 45
    outputs:
      server_ip: ${{ steps.stage0-api.outputs.server_ip }}
      server_id: ${{ steps.stage0-api.outputs.server_id }}
      tailscale_ip: ${{ steps.get-tailscale-ip.outputs.tailscale_ip }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Infrastructure Tools
        run: |
          pip install linode-cli
          sudo apt-get update && sudo apt-get install -y sshpass jq
          
          mkdir -p ~/.config/linode-cli
          cat > ~/.config/linode-cli/config << EOF
          [DEFAULT]
          default-user = DEFAULT
          region = ${{ env.TARGET_REGION }}
          type = ${{ env.SERVER_TYPE }}
          image = linode/arch
          token = ${{ secrets.LINODE_CLI_TOKEN }}
          EOF
          chmod 600 ~/.config/linode-cli/config

      - name: 🚀 Stage 0 Create API Server
        id: stage0-api
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
          SERVICE_ROOT_PASSWORD: ${{ secrets.SERVICE_ROOT_PASSWORD }}
        run: |
          SERVER_NAME="${{ needs.preflight-checks.outputs.api_server_name }}"
          echo "🚀 Creating API Server: $SERVER_NAME"
          
          # Similar logic to auth server but for API
          EXISTING_SERVER=$(linode-cli linodes list --text --no-headers | grep "$SERVER_NAME" | head -1 || echo "")
          
          if [[ -n "$EXISTING_SERVER" ]] && [[ "${{ env.CREATE_NEW_SERVERS }}" != "true" ]]; then
            echo "✅ Using existing API server"
            SERVER_ID=$(echo "$EXISTING_SERVER" | cut -f1)
            SERVER_INFO=$(linode-cli linodes view "$SERVER_ID" --text --no-headers)
            for col in 4 5 6 7; do
              SERVER_IP=$(echo "$SERVER_INFO" | cut -f$col)
              if [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                break
              fi
            done
          else
            echo "🆕 Creating new API server"
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/api_deployment_key -N "" -C "github-actions-api"
            SSH_PUBLIC_KEY=$(cat ~/.ssh/api_deployment_key.pub)
            
            RESULT=$(linode-cli linodes create \
              --type "${{ env.SERVER_TYPE }}" \
              --region "${{ env.TARGET_REGION }}" \
              --image "linode/arch" \
              --label "$SERVER_NAME" \
              --root_pass "${{ secrets.SERVICE_ROOT_PASSWORD }}" \
              --authorized_keys "$SSH_PUBLIC_KEY" \
              --text --no-headers)
            
            SERVER_ID=$(echo "$RESULT" | cut -f1)
            
            echo "⏳ Waiting for API server to be ready..."
            for i in {1..20}; do
              SERVER_INFO=$(linode-cli linodes view "$SERVER_ID" --text --no-headers)
              STATUS=$(echo "$SERVER_INFO" | cut -f6)
              
              if [[ "$STATUS" == "running" ]]; then
                echo "✅ API server is running"
                break
              fi
              
              echo "Attempt $i/20: Status=$STATUS"
              sleep 15
            done
            
            for col in 4 5 6 7; do
              SERVER_IP=$(echo "$SERVER_INFO" | cut -f$col)
              if [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                break
              fi
            done
          fi
          
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          echo "server_id=$SERVER_ID" >> $GITHUB_OUTPUT
          echo "✅ API Server ready: $SERVER_IP"

      - name: 🛠️ Configure API Server
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
          ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          SERVER_IP="${{ steps.stage0-api.outputs.server_ip }}"
          echo "🛠️ Configuring API server at $SERVER_IP..."
          
          # Wait for SSH
          for i in {1..15}; do
            if timeout 10 ssh -i ~/.ssh/api_deployment_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$SERVER_IP "echo 'SSH ready'" 2>/dev/null; then
              echo "✅ SSH access confirmed"
              break
            fi
            echo "Attempt $i/15: SSH not ready yet..."
            sleep 20
          done
          
          # Create configuration script for API server
          cat > /tmp/api-setup.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "🔄 Updating system..."
          pacman -Syu --noconfirm
          pacman -S --noconfirm curl wget git docker docker-compose tailscale sudo base-devel
          
          echo "👥 Creating service users..."
          useradd -m -s /bin/bash fks_user || true
          echo "fks_user:ACTIONS_PASSWORD_PLACEHOLDER" | chpasswd
          usermod -aG docker fks_user
          
          echo "📁 Setting up FKS directory..."
          mkdir -p /home/fks_user/fks
          cd /home/fks_user/fks
          if [[ ! -d ".git" ]]; then
            git clone https://github.com/REPO_OWNER_PLACEHOLDER/fks.git . || echo "Clone failed, continuing..."
          fi
          chown -R fks_user:fks_user /home/fks_user/fks
          
          echo "🔗 Setting up Tailscale..."
          systemctl enable tailscaled
          systemctl start tailscaled
          hostnamectl set-hostname "fks-api"
          tailscale up --authkey="TAILSCALE_KEY_PLACEHOLDER" --hostname="fks-api" --accept-routes --timeout=120s
          
          echo "🐳 Starting Docker..."
          systemctl enable docker
          systemctl start docker
          
          echo "✅ API server setup complete"
          EOF
          
          # Replace placeholders
          sed -i "s/ACTIONS_PASSWORD_PLACEHOLDER/$ACTIONS_USER_PASSWORD/g" /tmp/api-setup.sh
          sed -i "s/TAILSCALE_KEY_PLACEHOLDER/$TAILSCALE_AUTH_KEY/g" /tmp/api-setup.sh
          sed -i "s/REPO_OWNER_PLACEHOLDER/${{ github.repository_owner }}/g" /tmp/api-setup.sh
          
          # Execute setup
          scp -i ~/.ssh/api_deployment_key -o StrictHostKeyChecking=no /tmp/api-setup.sh root@$SERVER_IP:/tmp/
          ssh -i ~/.ssh/api_deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP "chmod +x /tmp/api-setup.sh && /tmp/api-setup.sh"

      - name: 🚢 Deploy API Services
        run: |
          SERVER_IP="${{ steps.stage0-api.outputs.server_ip }}"
          echo "🚢 Deploying API services to $SERVER_IP..."
          
          chmod +x ./services/fks/fks-service-manager.sh
          ./services/fks/fks-service-manager.sh deploy --mode single --server fks_user@$SERVER_IP

      - name: 🔗 Get Tailscale IP
        id: get-tailscale-ip
        run: |
          SERVER_IP="${{ steps.stage0-api.outputs.server_ip }}"
          echo "🔗 Getting Tailscale IP for API server..."
          
          TAILSCALE_IP=$(ssh -i ~/.ssh/api_deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP "tailscale ip -4 2>/dev/null" || echo "")
          
          if [[ -n "$TAILSCALE_IP" ]]; then
            echo "✅ API Tailscale IP: $TAILSCALE_IP"
            echo "tailscale_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not get Tailscale IP"
            echo "tailscale_ip=" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # Web Server Deployment
  # ============================================================================
  deploy-web:
    name: 🌐 Deploy Web Server
    runs-on: ubuntu-latest
    needs: [preflight-checks, deploy-auth, deploy-api]
    if: needs.preflight-checks.outputs.should_deploy_web == 'true'
    timeout-minutes: 45
    outputs:
      server_ip: ${{ steps.stage0-web.outputs.server_ip }}
      server_id: ${{ steps.stage0-web.outputs.server_id }}
      tailscale_ip: ${{ steps.get-tailscale-ip.outputs.tailscale_ip }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Infrastructure Tools
        run: |
          pip install linode-cli
          sudo apt-get update && sudo apt-get install -y sshpass jq
          
          mkdir -p ~/.config/linode-cli
          cat > ~/.config/linode-cli/config << EOF
          [DEFAULT]
          default-user = DEFAULT
          region = ${{ env.TARGET_REGION }}
          type = ${{ env.SERVER_TYPE }}
          image = linode/arch
          token = ${{ secrets.LINODE_CLI_TOKEN }}
          EOF
          chmod 600 ~/.config/linode-cli/config

      - name: 🚀 Stage 0 Create Web Server
        id: stage0-web
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
          SERVICE_ROOT_PASSWORD: ${{ secrets.SERVICE_ROOT_PASSWORD }}
        run: |
          SERVER_NAME="${{ needs.preflight-checks.outputs.web_server_name }}"
          echo "🚀 Creating Web Server: $SERVER_NAME"
          
          EXISTING_SERVER=$(linode-cli linodes list --text --no-headers | grep "$SERVER_NAME" | head -1 || echo "")
          
          if [[ -n "$EXISTING_SERVER" ]] && [[ "${{ env.CREATE_NEW_SERVERS }}" != "true" ]]; then
            echo "✅ Using existing Web server"
            SERVER_ID=$(echo "$EXISTING_SERVER" | cut -f1)
            SERVER_INFO=$(linode-cli linodes view "$SERVER_ID" --text --no-headers)
            for col in 4 5 6 7; do
              SERVER_IP=$(echo "$SERVER_INFO" | cut -f$col)
              if [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                break
              fi
            done
          else
            echo "🆕 Creating new Web server"
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/web_deployment_key -N "" -C "github-actions-web"
            SSH_PUBLIC_KEY=$(cat ~/.ssh/web_deployment_key.pub)
            
            RESULT=$(linode-cli linodes create \
              --type "${{ env.SERVER_TYPE }}" \
              --region "${{ env.TARGET_REGION }}" \
              --image "linode/arch" \
              --label "$SERVER_NAME" \
              --root_pass "${{ secrets.SERVICE_ROOT_PASSWORD }}" \
              --authorized_keys "$SSH_PUBLIC_KEY" \
              --text --no-headers)
            
            SERVER_ID=$(echo "$RESULT" | cut -f1)
            
            echo "⏳ Waiting for Web server to be ready..."
            for i in {1..20}; do
              SERVER_INFO=$(linode-cli linodes view "$SERVER_ID" --text --no-headers)
              STATUS=$(echo "$SERVER_INFO" | cut -f6)
              
              if [[ "$STATUS" == "running" ]]; then
                echo "✅ Web server is running"
                break
              fi
              
              echo "Attempt $i/20: Status=$STATUS"
              sleep 15
            done
            
            for col in 4 5 6 7; do
              SERVER_IP=$(echo "$SERVER_INFO" | cut -f$col)
              if [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                break
              fi
            done
          fi
          
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
          echo "server_id=$SERVER_ID" >> $GITHUB_OUTPUT
          echo "✅ Web Server ready: $SERVER_IP"

      - name: 🛠️ Configure Web Server
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          JORDAN_PASSWORD: ${{ secrets.JORDAN_PASSWORD }}
          ACTIONS_USER_PASSWORD: ${{ secrets.ACTIONS_USER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          SERVER_IP="${{ steps.stage0-web.outputs.server_ip }}"
          echo "🛠️ Configuring Web server at $SERVER_IP..."
          
          # Wait for SSH
          for i in {1..15}; do
            if timeout 10 ssh -i ~/.ssh/web_deployment_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$SERVER_IP "echo 'SSH ready'" 2>/dev/null; then
              echo "✅ SSH access confirmed"
              break
            fi
            echo "Attempt $i/15: SSH not ready yet..."
            sleep 20
          done
          
          # Create configuration script for Web server
          cat > /tmp/web-setup.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "🔄 Updating system..."
          pacman -Syu --noconfirm
          pacman -S --noconfirm curl wget git docker docker-compose tailscale sudo base-devel
          
          echo "👥 Creating service users..."
          useradd -m -s /bin/bash fks_user || true
          echo "fks_user:ACTIONS_PASSWORD_PLACEHOLDER" | chpasswd
          usermod -aG docker fks_user
          
          echo "📁 Setting up FKS directory..."
          mkdir -p /home/fks_user/fks
          cd /home/fks_user/fks
          if [[ ! -d ".git" ]]; then
            git clone https://github.com/REPO_OWNER_PLACEHOLDER/fks.git . || echo "Clone failed, continuing..."
          fi
          chown -R fks_user:fks_user /home/fks_user/fks
          
          echo "🔗 Setting up Tailscale..."
          systemctl enable tailscaled
          systemctl start tailscaled
          hostnamectl set-hostname "fks-web"
          tailscale up --authkey="TAILSCALE_KEY_PLACEHOLDER" --hostname="fks-web" --accept-routes --timeout=120s
          
          echo "🐳 Starting Docker..."
          systemctl enable docker
          systemctl start docker
          
          echo "✅ Web server setup complete"
          EOF
          
          # Replace placeholders
          sed -i "s/ACTIONS_PASSWORD_PLACEHOLDER/$ACTIONS_USER_PASSWORD/g" /tmp/web-setup.sh
          sed -i "s/TAILSCALE_KEY_PLACEHOLDER/$TAILSCALE_AUTH_KEY/g" /tmp/web-setup.sh
          sed -i "s/REPO_OWNER_PLACEHOLDER/${{ github.repository_owner }}/g" /tmp/web-setup.sh
          
          # Execute setup
          scp -i ~/.ssh/web_deployment_key -o StrictHostKeyChecking=no /tmp/web-setup.sh root@$SERVER_IP:/tmp/
          ssh -i ~/.ssh/web_deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP "chmod +x /tmp/web-setup.sh && /tmp/web-setup.sh"

      - name: 🚢 Deploy Web Services
        run: |
          SERVER_IP="${{ steps.stage0-web.outputs.server_ip }}"
          echo "🚢 Deploying Web services to $SERVER_IP..."
          
          chmod +x ./services/fks/fks-service-manager.sh
          ./services/fks/fks-service-manager.sh deploy --mode single --server fks_user@$SERVER_IP

      - name: 🔗 Get Tailscale IP
        id: get-tailscale-ip
        run: |
          SERVER_IP="${{ steps.stage0-web.outputs.server_ip }}"
          echo "🔗 Getting Tailscale IP for Web server..."
          
          TAILSCALE_IP=$(ssh -i ~/.ssh/web_deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP "tailscale ip -4 2>/dev/null" || echo "")
          
          if [[ -n "$TAILSCALE_IP" ]]; then
            echo "✅ Web Tailscale IP: $TAILSCALE_IP"
            echo "tailscale_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not get Tailscale IP"
            echo "tailscale_ip=" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # Single Server Deployment (unchanged from original)
  # ============================================================================
  deploy-single:
    name: 🚀 Deploy Single Server
    runs-on: ubuntu-latest
    needs: preflight-checks
    if: needs.preflight-checks.outputs.should_deploy_single == 'true'
    timeout-minutes: 45
    outputs:
      server_ip: ${{ steps.get-server.outputs.server_ip }}
      tailscale_ip: ${{ steps.get-tailscale-ip.outputs.tailscale_ip }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Infrastructure Tools
        run: |
          pip install linode-cli
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: 🚀 Create or Find Server
        id: get-server
        env:
          LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
        run: |
          SERVER_NAME="${{ needs.preflight-checks.outputs.single_server_name }}"
          echo "🚀 Managing server: $SERVER_NAME"
          
          # Check if server exists
          EXISTING_SERVER=$(linode-cli linodes list --text --no-headers | grep "$SERVER_NAME" | head -1 || echo "")
          
          if [[ -n "$EXISTING_SERVER" ]] && [[ "${{ env.CREATE_NEW_SERVERS }}" != "true" ]]; then
            echo "🔍 Found existing server"
            SERVER_ID=$(echo "$EXISTING_SERVER" | cut -f1)
            
            # Get server IP from multiple possible columns
            for col in 4 5 6 7; do
              SERVER_IP=$(echo "$EXISTING_SERVER" | cut -f$col)
              if [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                break
              fi
            done
            
            echo "✅ Using existing server: $SERVER_IP"
          elif [[ "${{ env.CREATE_NEW_SERVERS }}" == "true" ]]; then
            echo "🆕 Creating new server: $SERVER_NAME"
            
            # Generate SSH key
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/deployment_key -N "" -C "github-actions-$SERVER_NAME"
            SSH_PUBLIC_KEY=$(cat ~/.ssh/deployment_key.pub)
            
            # Create server
            RESULT=$(linode-cli linodes create \
              --type "${{ env.SERVER_TYPE }}" \
              --region "${{ env.TARGET_REGION }}" \
              --image "linode/arch" \
              --label "$SERVER_NAME" \
              --root_pass "${{ secrets.SERVICE_ROOT_PASSWORD }}" \
              --authorized_keys "$SSH_PUBLIC_KEY" \
              --text --no-headers)
            
            SERVER_ID=$(echo "$RESULT" | cut -f1)
            
            # Wait for server to be ready
            echo "⏳ Waiting for server to be ready..."
            for i in {1..20}; do
              SERVER_INFO=$(linode-cli linodes view "$SERVER_ID" --text --no-headers)
              STATUS=$(echo "$SERVER_INFO" | cut -f6)
              
              if [[ "$STATUS" == "running" ]]; then
                echo "✅ Server is running"
                break
              fi
              
              echo "Attempt $i/20: Status=$STATUS"
              sleep 15
            done
            
            # Get server IP
            for col in 4 5 6 7; do
              SERVER_IP=$(echo "$SERVER_INFO" | cut -f$col)
              if [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                break
              fi
            done
            
            echo "✅ Server created: $SERVER_IP"
          else
            echo "❌ Server not found and CREATE_NEW_SERVERS=false"
            exit 1
          fi
          
          echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT

      - name: ⏳ Wait for SSH and Setup Server
        run: |
          SERVER_IP="${{ steps.get-server.outputs.server_ip }}"
          echo "⏳ Waiting for SSH access to $SERVER_IP..."
          
          # Wait for SSH
          for i in {1..15}; do
            if timeout 10 ssh -i ~/.ssh/deployment_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$SERVER_IP "echo 'SSH ready'" 2>/dev/null; then
              echo "✅ SSH access confirmed"
              break
            fi
            echo "Attempt $i/15: SSH not ready yet..."
            sleep 20
          done
          
          # Run initial setup
          echo "🏗️ Running initial server setup..."
          cat > /tmp/initial-setup.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "🔄 Updating system and installing packages..."
          pacman -Syu --noconfirm
          pacman -S --noconfirm curl wget git docker docker-compose tailscale sudo base-devel
          
          echo "👥 Creating fks_user..."
          useradd -m -s /bin/bash fks_user || true
          echo "fks_user:${{ secrets.ACTIONS_USER_PASSWORD }}" | chpasswd
          usermod -aG docker fks_user
          
          # Create FKS directory and clone repo
          mkdir -p /home/fks_user/fks
          cd /home/fks_user/fks
          if [[ ! -d ".git" ]]; then
            git clone https://github.com/${{ github.repository_owner }}/fks.git . || echo "Clone failed, continuing..."
          fi
          chown -R fks_user:fks_user /home/fks_user/fks
          
          echo "🔗 Setting up Tailscale..."
          systemctl enable tailscaled
          systemctl start tailscaled
          hostnamectl set-hostname "fks"
          tailscale up --authkey="${{ secrets.TAILSCALE_AUTH_KEY }}" --hostname="fks" --accept-routes --timeout=120s
          
          echo "🐳 Starting Docker..."
          systemctl enable docker
          systemctl start docker
          
          echo "✅ Initial setup complete"
          EOF
          
          scp -i ~/.ssh/deployment_key -o StrictHostKeyChecking=no /tmp/initial-setup.sh root@$SERVER_IP:/tmp/
          ssh -i ~/.ssh/deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP "chmod +x /tmp/initial-setup.sh && /tmp/initial-setup.sh"

      - name: 🚢 Deploy FKS Services
        run: |
          SERVER_IP="${{ steps.get-server.outputs.server_ip }}"
          echo "🚢 Deploying FKS to $SERVER_IP..."
          
          # Deploy using the FKS service manager
          ./services/fks/fks-service-manager.sh deploy --mode single --server fks_user@$SERVER_IP

      - name: 🔗 Get Tailscale IP
        id: get-tailscale-ip
        run: |
          SERVER_IP="${{ steps.get-server.outputs.server_ip }}"
          echo "🔗 Getting Tailscale IP..."
          
          # Get Tailscale IP from the server
          TAILSCALE_IP=$(ssh -i ~/.ssh/deployment_key -o StrictHostKeyChecking=no root@$SERVER_IP "tailscale ip -4 2>/dev/null" || echo "")
          
          if [[ -n "$TAILSCALE_IP" ]]; then
            echo "✅ Tailscale IP: $TAILSCALE_IP"
            echo "tailscale_ip=$TAILSCALE_IP" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not get Tailscale IP"
            echo "tailscale_ip=" >> $GITHUB_OUTPUT
          fi

  # ============================================================================
  # DNS Updates
  # ============================================================================
  update-dns:
    name: 🌍 Update DNS Records
    runs-on: ubuntu-latest
    needs: [preflight-checks, deploy-single, deploy-auth, deploy-api, deploy-web]
    if: always() && inputs.update_dns == true && (needs.deploy-single.result == 'success' || (needs.deploy-auth.result == 'success' || needs.deploy-api.result == 'success' || needs.deploy-web.result == 'success'))
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🌍 Update Cloudflare DNS
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "🌍 Updating Cloudflare DNS records..."
          
          if [[ -z "$CLOUDFLARE_API_TOKEN" ]] || [[ -z "$CLOUDFLARE_ZONE_ID" ]]; then
            echo "⚠️ Cloudflare credentials not available - skipping DNS updates"
            exit 0
          fi
          
          # Make DNS script executable
          chmod +x ./scripts/dns/cloudflare-updater.sh
          
          case "${{ env.DEPLOYMENT_MODE }}" in
            "single")
              SINGLE_IP="${{ needs.deploy-single.outputs.tailscale_ip }}"
              if [[ -n "$SINGLE_IP" ]]; then
                echo "📡 Updating DNS for single server: $SINGLE_IP"
                ./scripts/dns/cloudflare-updater.sh update-service --service fks --ip "$SINGLE_IP"
              fi
              ;;
            "multi-all")
              AUTH_IP="${{ needs.deploy-auth.outputs.tailscale_ip }}"
              API_IP="${{ needs.deploy-api.outputs.tailscale_ip }}"
              WEB_IP="${{ needs.deploy-web.outputs.tailscale_ip }}"
              
              echo "📡 Updating DNS for multi-server deployment"
              ./scripts/dns/cloudflare-updater.sh update-multi-server \
                ${AUTH_IP:+--auth-ip "$AUTH_IP"} \
                ${API_IP:+--api-ip "$API_IP"} \
                ${WEB_IP:+--web-ip "$WEB_IP"}
              ;;
            *)
              echo "ℹ️ Partial deployment - updating available server IPs"
              if [[ -n "${{ needs.deploy-auth.outputs.tailscale_ip }}" ]]; then
                ./scripts/dns/cloudflare-updater.sh update-service --service auth --ip "${{ needs.deploy-auth.outputs.tailscale_ip }}"
              fi
              if [[ -n "${{ needs.deploy-api.outputs.tailscale_ip }}" ]]; then
                ./scripts/dns/cloudflare-updater.sh update-service --service api --ip "${{ needs.deploy-api.outputs.tailscale_ip }}"
              fi
              if [[ -n "${{ needs.deploy-web.outputs.tailscale_ip }}" ]]; then
                ./scripts/dns/cloudflare-updater.sh update-service --service web --ip "${{ needs.deploy-web.outputs.tailscale_ip }}"
              fi
              ;;
          esac

  # ============================================================================
  # Final Summary
  # ============================================================================
  deployment-summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [preflight-checks, deploy-single, deploy-auth, deploy-api, deploy-web, update-dns]
    if: always()
    
    steps:
      - name: 📋 Generate Summary
        run: |
          echo "📋 FKS Enhanced Multi-Server Deployment Summary"
          echo "================================================"
          echo "Mode: ${{ env.DEPLOYMENT_MODE }}"
          echo "DNS Updates: ${{ env.UPDATE_DNS }}"
          echo ""
          echo "Deployment Results:"
          echo "-------------------"
          
          if [[ "${{ needs.deploy-single.result }}" != "skipped" ]]; then
            echo "🚀 Single Server: ${{ needs.deploy-single.result }} (IP: ${{ needs.deploy-single.outputs.tailscale_ip }})"
          fi
          
          if [[ "${{ needs.deploy-auth.result }}" != "skipped" ]]; then
            echo "🔐 Auth Server: ${{ needs.deploy-auth.result }} (IP: ${{ needs.deploy-auth.outputs.tailscale_ip }})"
          fi
          
          if [[ "${{ needs.deploy-api.result }}" != "skipped" ]]; then
            echo "⚡ API Server: ${{ needs.deploy-api.result }} (IP: ${{ needs.deploy-api.outputs.tailscale_ip }})"
          fi
          
          if [[ "${{ needs.deploy-web.result }}" != "skipped" ]]; then
            echo "🌐 Web Server: ${{ needs.deploy-web.result }} (IP: ${{ needs.deploy-web.outputs.tailscale_ip }})"
          fi
          
          echo ""
          echo "Access URLs:"
          echo "------------"
          if [[ "${{ env.DEPLOYMENT_MODE }}" == "multi-all" ]]; then
            echo "🔐 Auth: https://auth.${{ env.DOMAIN_SUFFIX }}"
            echo "⚡ API: https://api.${{ env.DOMAIN_SUFFIX }}"
            echo "🌐 Web: https://fks.${{ env.DOMAIN_SUFFIX }}"
          elif [[ "${{ env.DEPLOYMENT_MODE }}" == "single" ]]; then
            echo "🚀 Main: https://fks.${{ env.DOMAIN_SUFFIX }}"
            echo "⚡ API: https://api.${{ env.DOMAIN_SUFFIX }}"
            echo "🔐 Auth: https://auth.${{ env.DOMAIN_SUFFIX }}"
          fi
          
          echo ""
          echo "✅ Enhanced Multi-Server Deployment Complete!"
